// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id
  name        String
  email       String?       @unique
  profileUrl  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  rooms       Room[]
  messages    Message[]
  memberships RoomMembers[]
  sentInvites RoomInvite[]
}

model Room {
  id          String        @id
  name        String
  description String?
  isPublic    Boolean
  creatorId   String
  creator     User          @relation(fields: [creatorId], references: [id])
  tags        Tag[]         @relation("RoomTags")
  members     RoomMembers[]
  invites     RoomInvite[]
  messages    Message[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model RoomMembers {
  id     String @id @default(cuid())
  userId String
  roomId String
  user   User   @relation(fields: [userId], references: [id])
  room   Room   @relation(fields: [roomId], references: [id])

  @@unique([userId, roomId])
}

model Message {
  id String @id @default(cuid())
  roomId String
  senderId String
  senderName String
  senderProfileUrl String?
  content String
  createdAt DateTime @default(now())

  room Room @relation(fields: [roomId], references: [id])
  sender User @relation(fields: [senderId], references: [id])
}

model Tag {
  id String @id @default(cuid())
  name String @unique
  isCategory Boolean @default(false)
  rooms Room[] @relation("RoomTags")
  createdAt DateTime @default(now())
}

model RoomInvite {
  id        String       @id @default(cuid())
  roomId    String
  invitedBy String
  email     String // invite sent to this email (registered or not)
  status    InviteStatus @default(PENDING)
  createdAt DateTime     @default(now())
  expiresAt DateTime     @default(dbgenerated("now() + interval '24 hours'")) // Expires in 24 hours
  room      Room         @relation(fields: [roomId], references: [id])
  inviter   User         @relation(fields: [invitedBy], references: [id])

  @@unique([roomId, email])
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}
